{% extends './base.html.twig' %}

{% block title %}TODO{% endblock %}

{% block javascripts %}
    {# <script src="https://code.jquery.com/jquery-1.12.4.js"></script> #}
    <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>

    <script src="{{ asset('assets/js/ChessScript.js') }}"></script>

    <script>
        $(document).ready(function() {
            const socket = new WebSocket('ws://localhost:3001');
            const chess = new ChessScript('{{ fen }}');

            try {
                socket.addEventListener('open', function() {
                    console.log('CONNECTED');
                    var idGame = {
                        idGame: '{{ idGame }}',
                    };
                    socket.send(JSON.stringify(idGame));
                });
            } catch (error) {
                console.log(error);
            }

            socket.addEventListener('message', function(e) {
                try {
                    var move = JSON.parse(e.data);

                    if (move.flag === 'k') { // king side castelling
                        if (move.color === 'white') {
                            var img = $('#h1').html();
                            $('#h1').empty();
                            $('#h1').droppable('enable');
                            $('#f1').html(img);
                            $('#f1').droppable('disable');
                            $('#f1 img').draggable({
                                revert: true,
                            });
                        } else if (move.color === 'black') {
                            var img = $('#h8').html();
                            $('#h8').empty();
                            $('#h8').droppable('enable');
                            $('#f8').html(img);
                            $('#f8').droppable('disable');
                            $('#f8 img').draggable({
                                revert: true,
                            });
                        }
                    } else if (move.flag === 'q') { // queen side castelling
                        if (move.color === 'white') {
                            var img = $('#a1').html();
                            $('#a1').empty();
                            $('#a1').droppable('enable');
                            $('#d1').html(img);
                            $('#d1').droppable('disable');
                            $('#d1 img').draggable({
                                revert: true,
                            });
                        } else if (move.color === 'black') {
                            var img = $('#a8').html();
                            $('#a8').empty();
                            $('#a8').droppable('enable');
                            $('#d8').html(img);
                            $('#d8').droppable('disable');
                            $('#d8 img').draggable({
                                revert: true,
                            });
                        }
                    } else if (move.flag === 'e') { // en passant capture
                        if (move.color === 'white') {
                            var tmp = (move.to).split('');
                            var idPawnCatured = tmp[0] + (parseInt(tmp[1]) - 1);
                        } else if (move.color === 'black') {
                            var tmp = (move.to).split('');
                            var idPawnCatured = tmp[0] + (parseInt(tmp[1]) + 1);
                        }
                        $('#' + idPawnCatured).empty();
                    }

                    if (typeof move.promotion !== 'undefined' && move.promotion !== null) { // promotion
                        var piecesPromotion = {
                            'r': 'rook',
                            'n': 'knight',
                            'b': 'bishop',
                            'q': 'queen',
                        };

                        src = "{{ asset('assets/img/pieces/playerColor-chessboard.png') }}";
                        src = src.replace('chessboard', piecesPromotion[move.promotion]);
                        src = src.replace('playerColor', move.color);
                        $('#' + move.from).empty();
                        $('#' + move.to).html('<img class="piece ' + move.color + '" src="' + src + '" alt>');
                        $('#' + move.to).droppable('enable');

                        $('.in-check').removeClass('in-check');

                        chess.move({
                            from: move.from,
                            to: move.to,
                            promotion: move.promotion,
                        });

                        if (chess.in_draw() === true) {
                            alert('Match nul !');
                        }

                        if (chess.in_checkmate() === true) {
                            if (move.color === 'w') {
                                setWinner('blancs');
                            } else if (move.color === 'b') {
                                setWinner('noirs');
                            }
                        }

                        if (chess.in_check() === true) {
                            if (move.color === 'white') {
                                var kingposition = getKingPosition(move.fen, 'black');
                                $('#' + kingposition).addClass('in-check');
                            } else if (move.color === 'black') {
                                var kingposition = getKingPosition(move.fen, 'white');
                                $('#' + kingposition).addClass('in-check');
                            }
                        }
                        switchTurn();
                    } else {
                        var img = $('#' + move.from).html();
                        $('#' + move.from).empty();
                        $('#' + move.to).html(img);
                        $('#' + move.to).droppable('enable');

                        $('.in-check').removeClass('in-check');

                        chess.move({
                            from: move.from,
                            to: move.to
                        });

                        if (chess.in_draw() === true) {
                            alert('Match nul !');
                        }

                        if (chess.in_checkmate() === true) {
                            if (move.color === 'white') {
                                setWinner('blancs');
                            } else if (move.color === 'black') {
                                setWinner('noirs');
                            }
                        }

                        if (chess.in_check() === true) {
                            if (move.color === 'white') {
                                var kingposition = getKingPosition(move.fen, 'black');
                                $('#' + kingposition).addClass('in-check');
                            } else if (move.color === 'black') {
                                var kingposition = getKingPosition(move.fen, 'white');
                                $('#' + kingposition).addClass('in-check');
                            }
                        }

                        if (typeof move.fen !== 'undefined') {
                            var tmp = move.fen.split(' ');
                            var tmp2 = parseInt(tmp[5]);
                            if (tmp2 === 2 && move.color === 'black') {
                                startTimer('player');
                            } else {
                                updateTime('opponent', move.timer); // update time because of lantency
                                switchTurn();
                            }
                        }
                    }
                    if (typeof move.idGame === 'undefined') {
                        $('#player-turn').text('Ã€ votre tour !');
                    }
                } catch(error) {
                    console.log(error);
                }
            });

            $('.piece.' + playerColor).off().on('click', function(event1) {
                event1.stopPropagation();
                var squareObjFrom = $(this).parent();
                var pieceObjFrom = $(this);
                var idSquare = $(squareObjFrom).attr('id');

                var sameSquareClicked = false;
                if (squareObjFrom.hasClass('clicked')) {
                    var sameSquareClicked = true;
                }

                // If another case is clicked, remove it
                $('.chess-table.clicked').removeClass('clicked');

                $('.chess-table.possible-move').each(function() {
                    $(this).removeClass('possible-move');
                });

                // Same square clicked, then it removes the clicked class and do nothing else
                if (sameSquareClicked) {
                    return;
                }

                console.log('1er click ' + idSquare);

               $(squareObjFrom).addClass('clicked');

                var allPossibleMoves = chess.moves({
                    verbose: true
                });

                for (var i in allPossibleMoves) {
                    if (allPossibleMoves[i].from === idSquare) {
                        $('#' + allPossibleMoves[i].to).addClass('possible-move');
                    }
                }

                $('.chess-table.possible-move').off().on('click', function(event2) {
                    var squareObjTo = $(this);
                    console.log('2eme click ' + $(this).attr('id'));

                    var droppedFrom = pieceObjFrom;
                    var droppedTo = squareObjTo;

                    var idFrom = droppedFrom.parent().attr('id');
                    var idTo = droppedTo.attr('id');

                    var tmp = chess.get(idFrom);

                    var tmp2 = idFrom.split('');
                    var idFromLine = parseInt(tmp2[1]);

                    var tmp3 = idTo.split('');
                    var idToLine = parseInt(tmp3[1]);

                    var piecesPromotion = {
                        'r': 'rook',
                        'n': 'knight',
                        'b': 'bishop',
                        'q': 'queen',
                    };
                    var promotion = null;
                    if (tmp !== null && tmp['type'] === 'p' && ((playerColor === 'white' && tmp['color'] === 'w' && idFromLine === 7 && idToLine === 8) || (playerColor === 'black' && tmp['color'] === 'b' && idFromLine === 2 && idToLine === 1))) {
                        promotionPiece(function(promotion) {
                            var wasInCheck = chess.in_check();
                            var moving = chess.move({
                                from: idFrom,
                                to: idTo,
                                promotion: promotion
                            });

                            if (moving !== null) {
                                if (chess.in_check() === true) {
                                    if (moving.color === 'w') {
                                        var kingposition = getKingPosition(chess.fen(), 'black');
                                        $('#' + kingposition).addClass('in-check');
                                    } else if (moving.color === 'b') {
                                        var kingposition = getKingPosition(chess.fen(), 'white');
                                        $('#' + kingposition).addClass('in-check');
                                    }
                                }

                                if (wasInCheck) {
                                    if (moving.color === 'w') {
                                        var kingposition = getKingPosition(chess.fen(), 'black');
                                        $('#' + kingposition).removeClass('in-check');
                                    } else if (moving.color === 'b') {
                                        var kingposition = getKingPosition(chess.fen(), 'white');
                                        $('#' + kingposition).removeClass('in-check');
                                    }
                                }

                                if ($(droppedTo).html() !== '') {
                                    $(this).empty();
                                }

                                $(droppedTo).droppable('disable');
                                $(droppedFrom).parent().droppable('enable');
                                $(droppedFrom).detach().css({top: 0, left: 0}).appendTo(droppedTo);
                                src = "{{ asset('assets/img/pieces/playerColor-chessboard.png') }}";
                                src = src.replace('chessboard', piecesPromotion[promotion]);
                                src = src.replace('playerColor', playerColor);
                                $(droppedTo).html('<img class="piece ' + playerColor + '" src="' + src + '" alt>');
                                $('#' + idTo + ' img').draggable({
                                    revert: true,
                                });

                                var movePiece = {
                                    from: idFrom,
                                    to: idTo,
                                    color: playerColor,
                                    fen: chess.fen(),
                                    flag: moving.flags,
                                    promotion: moving.promotion,
                                    timer: getSecondsWithTime($('#timer-player').text(), ':'),
                                };
                                socket.send(JSON.stringify(movePiece));
                                switchTurn();
                                $('#player-turn').text('En attente de l\'adversaire');

                                if (chess.in_checkmate() === true) {
                                    if (moving.color === 'w') {
                                        setWinner('blancs');
                                    } else if (moving.color === 'b') {
                                        setWinner('noirs');
                                    }
                                }
                            }
                        });
                    } else {
                        var wasInCheck = chess.in_check();
                        var moving = chess.move({
                            from: idFrom,
                            to: idTo,
                        });

                        if (moving !== null) {
                            if (chess.in_check() === true) {
                                if (moving.color === 'w') {
                                    var kingposition = getKingPosition(chess.fen(), 'black');
                                    $('#' + kingposition).addClass('in-check');
                                } else if (moving.color === 'b') {
                                    var kingposition = getKingPosition(chess.fen(), 'white');
                                    $('#' + kingposition).addClass('in-check');
                                }
                            }

                            if (wasInCheck) {
                                $('.in-check').removeClass('in-check');
                            }
                            var flag = moving.flags;
                            if (flag === 'k') { // king side castelling
                                if (playerColor === 'white') {
                                    var img = $('#h1').html();
                                    $('#h1').empty();
                                    $('#h1').droppable('enable');
                                    $('#f1').html(img);
                                    $('#f1').droppable('disable');
                                    $('#f1 img').draggable({
                                        revert: true,
                                    });
                                } else if (playerColor === 'black') {
                                    var img = $('#h8').html();
                                    $('#h8').empty();
                                    $('#h8').droppable('enable');
                                    $('#f8').html(img);
                                    $('#f8').droppable('disable');
                                    $('#f8 img').draggable({
                                        revert: true,
                                    });
                                }
                            } else if (flag === 'q') { // queen side castelling
                                if (playerColor === 'white') {
                                    var img = $('#a1').html();
                                    $('#a1').empty();
                                    $('#a1').droppable('enable');
                                    $('#d1').html(img);
                                    $('#d1').droppable('disable');
                                    $('#d1 img').draggable({
                                        revert: true,
                                    });
                                } else if (playerColor === 'black') {
                                    var img = $('#a8').html();
                                    $('#a8').empty();
                                    $('#a8').droppable('enable');
                                    $('#d8').html(img);
                                    $('#d8').droppable('disable');
                                    $('#d8 img').draggable({
                                        revert: true,
                                    });
                                }
                            } else if (flag === 'e') { // en passant capture
                                if (playerColor === 'white') {
                                    var tmp = (moving.to).split('');
                                    var idPawnCatured = tmp[0] + (parseInt(tmp[1]) - 1);
                                } else if (playerColor === 'black') {
                                    var tmp = (moving.to).split('');
                                    var idPawnCatured = tmp[0] + (parseInt(tmp[1]) + 1);
                                }
                                $('#' + idPawnCatured).empty();
                            }

                            if ($(droppedTo).html() !== '') {
                                $(this).empty();
                            }

                            $(droppedTo).droppable('disable');
                            $(droppedFrom).parent().droppable('enable');
                            $(droppedFrom).detach().css({top: 0, left: 0}).appendTo(droppedTo);

                            var movePiece = {
                                from: idFrom,
                                to: idTo,
                                color: playerColor,
                                fen: chess.fen(),
                                flag: flag,
                                timer: getSecondsWithTime($('#timer-player').text(), ':'),
                            };
                            socket.send(JSON.stringify(movePiece));

                            var tmp = chess.fen().split(' ');
                            var tmp2 = parseInt(tmp[5]);
                            if (tmp2 === 2 && moving.color === 'b') {
                                startTimer('opponent');
                            } else {
                                switchTurn();
                            }

                            $('#player-turn').text('En attente de l\'adversaire');

                            if (chess.in_checkmate() === true) {
                                if (moving.color === 'w') {
                                    setWinner('blancs');
                                } else if (moving.color === 'b') {
                                    setWinner('noirs');
                                }
                            }
                        }
                    }


                    $('.chess-table.possible-move').each(function() {
                        $(this).removeClass('possible-move');
                    });

                    return;
                });
            });

            $('.piece.'+playerColor).draggable({
                // containment: 'table',
                // revert: 'invalid',
                revert: true,
                // classes: {
                //     'ui-draggable-dragging': 'selected'
                // },
                start: function(ev, ui) {
                    var atom = $(this).parent().attr('id');
                    // $(this).parent().addClass('selected')
                },
                // drag: function(ev, ui) {
                //     $(this).parent().addClass('selected')
                //     $(this).parent().removeClass('selected')
                // },
                // stop: function(ev, ui) {
                //     $(this).parent().removeClass('selected')
                // }
            });

            $('.chess-table').droppable({
                classes: {
                    'ui-droppable-hover': 'selected'
                },
                drop: function(ev, ui) {
                    var droppedFrom = ui.draggable;
                    var droppedTo = $(this);

                    var idFrom = droppedFrom.parent().attr('id');
                    var idTo = droppedTo.attr('id');

                    var tmp = chess.get(idFrom);

                    var tmp2 = idFrom.split('');
                    var idFromLine = parseInt(tmp2[1]);

                    var tmp3 = idTo.split('');
                    var idToLine = parseInt(tmp3[1]);

                    var piecesPromotion = {
                        'r': 'rook',
                        'n': 'knight',
                        'b': 'bishop',
                        'q': 'queen',
                    };
                    var promotion = null;
                    if (tmp !== null && tmp['type'] === 'p' && ((playerColor === 'white' && tmp['color'] === 'w' && idFromLine === 7 && idToLine === 8) || (playerColor === 'black' && tmp['color'] === 'b' && idFromLine === 2 && idToLine === 1))) {
                        promotionPiece(function(promotion) {
                            var wasInCheck = chess.in_check();
                            var moving = chess.move({
                                from: idFrom,
                                to: idTo,
                                promotion: promotion
                            });

                            if (moving !== null) {
                                if (chess.in_check() === true) {
                                    if (moving.color === 'w') {
                                        var kingposition = getKingPosition(chess.fen(), 'black');
                                        $('#' + kingposition).addClass('in-check');
                                    } else if (moving.color === 'b') {
                                        var kingposition = getKingPosition(chess.fen(), 'white');
                                        $('#' + kingposition).addClass('in-check');
                                    }
                                }

                                if (wasInCheck) {
                                    if (moving.color === 'w') {
                                        var kingposition = getKingPosition(chess.fen(), 'black');
                                        $('#' + kingposition).removeClass('in-check');
                                    } else if (moving.color === 'b') {
                                        var kingposition = getKingPosition(chess.fen(), 'white');
                                        $('#' + kingposition).removeClass('in-check');
                                    }
                                }

                                if ($(droppedTo).html() !== '') {
                                    $(this).empty();
                                }

                                $(droppedTo).droppable('disable');
                                $(droppedFrom).parent().droppable('enable');
                                $(droppedFrom).detach().css({top: 0, left: 0}).appendTo(droppedTo);
                                src = "{{ asset('assets/img/pieces/playerColor-chessboard.png') }}";
                                src = src.replace('chessboard', piecesPromotion[promotion]);
                                src = src.replace('playerColor', playerColor);
                                $(droppedTo).html('<img class="piece ' + playerColor + '" src="' + src + '" alt>');
                                $('#' + idTo + ' img').draggable({
                                    revert: true,
                                });

                                var movePiece = {
                                    from: idFrom,
                                    to: idTo,
                                    color: playerColor,
                                    fen: chess.fen(),
                                    flag: moving.flags,
                                    promotion: moving.promotion,
                                    timer: getSecondsWithTime($('#timer-player').text(), ':'),
                                };
                                socket.send(JSON.stringify(movePiece));
                                switchTurn();
                                $('#player-turn').text('En attente de l\'adversaire');

                                if (chess.in_checkmate() === true) {
                                    if (moving.color === 'w') {
                                        setWinner('blancs');
                                    } else if (moving.color === 'b') {
                                        setWinner('noirs');
                                    }
                                }
                            }
                        });
                    } else {
                        var wasInCheck = chess.in_check();
                        var moving = chess.move({
                            from: idFrom,
                            to: idTo,
                        });

                        if (moving !== null) {
                            if (chess.in_check() === true) {
                                if (moving.color === 'w') {
                                    var kingposition = getKingPosition(chess.fen(), 'black');
                                    $('#' + kingposition).addClass('in-check');
                                } else if (moving.color === 'b') {
                                    var kingposition = getKingPosition(chess.fen(), 'white');
                                    $('#' + kingposition).addClass('in-check');
                                }
                            }

                            if (wasInCheck) {
                                $('.in-check').removeClass('in-check');
                            }
                            var flag = moving.flags;
                            if (flag === 'k') { // king side castelling
                                if (playerColor === 'white') {
                                    var img = $('#h1').html();
                                    $('#h1').empty();
                                    $('#h1').droppable('enable');
                                    $('#f1').html(img);
                                    $('#f1').droppable('disable');
                                    $('#f1 img').draggable({
                                        revert: true,
                                    });
                                } else if (playerColor === 'black') {
                                    var img = $('#h8').html();
                                    $('#h8').empty();
                                    $('#h8').droppable('enable');
                                    $('#f8').html(img);
                                    $('#f8').droppable('disable');
                                    $('#f8 img').draggable({
                                        revert: true,
                                    });
                                }
                            } else if (flag === 'q') { // queen side castelling
                                if (playerColor === 'white') {
                                    var img = $('#a1').html();
                                    $('#a1').empty();
                                    $('#a1').droppable('enable');
                                    $('#d1').html(img);
                                    $('#d1').droppable('disable');
                                    $('#d1 img').draggable({
                                        revert: true,
                                    });
                                } else if (playerColor === 'black') {
                                    var img = $('#a8').html();
                                    $('#a8').empty();
                                    $('#a8').droppable('enable');
                                    $('#d8').html(img);
                                    $('#d8').droppable('disable');
                                    $('#d8 img').draggable({
                                        revert: true,
                                    });
                                }
                            } else if (flag === 'e') { // en passant capture
                                if (playerColor === 'white') {
                                    var tmp = (moving.to).split('');
                                    var idPawnCatured = tmp[0] + (parseInt(tmp[1]) - 1);
                                } else if (playerColor === 'black') {
                                    var tmp = (moving.to).split('');
                                    var idPawnCatured = tmp[0] + (parseInt(tmp[1]) + 1);
                                }
                                $('#' + idPawnCatured).empty();
                            }

                            if ($(droppedTo).html() !== '') {
                                $(this).empty();
                            }

                            $(droppedTo).droppable('disable');
                            $(droppedFrom).parent().droppable('enable');
                            $(droppedFrom).detach().css({top: 0, left: 0}).appendTo(droppedTo);

                            var movePiece = {
                                from: idFrom,
                                to: idTo,
                                color: playerColor,
                                fen: chess.fen(),
                                flag: flag,
                                timer: getSecondsWithTime($('#timer-player').text(), ':'),
                            };
                            socket.send(JSON.stringify(movePiece));

                            var tmp = chess.fen().split(' ');
                            var tmp2 = parseInt(tmp[5]);
                            if (tmp2 === 2 && moving.color === 'b') {
                                startTimer('opponent');
                            } else {
                                switchTurn();
                            }

                            $('#player-turn').text('En attente de l\'adversaire');

                            if (chess.in_checkmate() === true) {
                                if (moving.color === 'w') {
                                    setWinner('blancs');
                                } else if (moving.color === 'b') {
                                    setWinner('noirs');
                                }
                            }
                        }
                    }
                }
            });

            $('.chess-table img').each(function() {
                if ($(this).hasClass(playerColor)) {
                    $(this).parent().droppable('disable');
                }
            });
        });

        function promotionPiece(callback) {
            $('#promotion-modal').modal('show');
            $('#promotion-modal button').on('click', function() {
                var piece = $(this).attr('id');
                $('#promotion-modal').modal('hide');
                callback(piece);
            });
        }

        function getKingPosition(fen, color) {
            var tmp = fen.split(' ');
            var tmp2 = tmp[0].split('/');

            var piecesLabel = {
                'r': 'black-rook',
                'n': 'black-knight',
                'b': 'black-bishop',
                'q': 'black-queen',
                'k': 'black-king',
                'p': 'black-pawn',
                'R': 'white-rook',
                'N': 'white-knight',
                'B': 'white-bishop',
                'Q': 'white-queen',
                'K': 'white-king',
                'P': 'white-pawn',
            };

            var column = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'];
            var columnKey = 0;
            var line = 8;
            var chessboard = [];
            var atom = '';

            for (var i in tmp2) {
                atom = tmp2[i].split('');
                columnKey = 0;
                for (var j in atom) {
                    if ($.inArray(atom[j], ['r', 'n', 'b', 'q', 'k', 'p', 'R', 'N', 'B', 'Q', 'K', 'P']) !== -1) {
                        if ((color === 'white' && atom[j] === 'K') || (color === 'black' && atom[j] === 'k')) {
                            return column[columnKey] + line;
                        }
                        columnKey += 1;
                    } else {
                        columnKey += parseInt(atom[j]);
                    }
                }
                line--;
            }

            return null;
        }

        function placePieces(fen) {
            var tmp = fen.split(' ');
            var tmp2 = tmp[0].split('/');

            var playerColor = '{{ player.color }}';
            if (playerColor === 'white') {
                if (tmp[1] === 'w') {
                    $('#player-turn').text('Ã€ votre tour !');
                } else {
                    $('#player-turn').text('En attente de l\'adversaire');
                }
            } else {
                if (tmp[1] === 'w') {
                    $('#player-turn').text('En attente de l\'adversaire');
                } else {
                    $('#player-turn').text('Ã€ votre tour !');
                }
            }

            var piecesLabel = {
                'r': 'black-rook',
                'n': 'black-knight',
                'b': 'black-bishop',
                'q': 'black-queen',
                'k': 'black-king',
                'p': 'black-pawn',
                'R': 'white-rook',
                'N': 'white-knight',
                'B': 'white-bishop',
                'Q': 'white-queen',
                'K': 'white-king',
                'P': 'white-pawn',
            };

            var column = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'];
            var columnKey = 0;
            var line = 8;
            var chessboard = [];
            var atom = '';
            for (var i in tmp2) {
                atom = tmp2[i].split('');
                columnKey = 0;
                for (var j in atom) {
                    if ($.inArray(atom[j], ['r', 'n', 'b', 'q', 'k', 'p', 'R', 'N', 'B', 'Q', 'K', 'P']) !== -1) {
                        chessboard[column[columnKey] + line] = piecesLabel[atom[j]];
                        columnKey += 1;
                    } else {
                        columnKey += parseInt(atom[j]);
                    }
                }
                line--;
            }

            var src = null;
            var color = null;
            for (var k in chessboard) {
                src = "{{ asset('assets/img/pieces/chessboard.png') }}";
                src = src.replace("chessboard", chessboard[k]);

                color = 'white';
                if (chessboard[k].indexOf('white') == -1){
                    color = 'black';
                }
                $('#' + k).html('<img class="piece ' + color + '" src="' + src + '" alt>');
            }
        }

        // timer functions
        function getTime(time) {
            var min = Math.floor(time / 60);
            var sec = time % 60;
            return min + ':' + (sec < 10 ? '0' + sec : sec);
        }

        function getSeconds(min, sec) {
            var time = min * 60 + sec;
            return time;
        }

        function getSecondsWithTime(time, splitChar) {
            var splitTime = time.split(splitChar);
            var seconds = splitTime[0] * 60;
            if (typeof splitTime[1] !== 'undefined') {
                seconds += parseInt(splitTime[1]);
            }
            return seconds;
        }

        function switchTurn() {
            if (typeof times !== 'undefined') { // undefined the first moves, when the timer is not started yet
                times[turn] += parseInt(increment);
            }
            if (turn === 'player') {
                turn = 'opponent';
            } else {
                turn = 'player';
            }
        }

        function updateTime(playerTurn, time) {
            $('#timer-' + playerTurn).text(getTime(time));

            return;
        }

        function setUpTimer() {
            var minutesPlayer = parseInt('{{ player.timeLeft }}' / 60, 10);
            var secondsPlayer = parseInt('{{ player.timeLeft }}' % 60, 10);

            var minutesOpponent = parseInt('{{ opponent.timeLeft }}' / 60, 10);
            var secondsOpponent = parseInt('{{ opponent.timeLeft }}' % 60, 10);

            $('#timer-player').text(getTime(getSeconds(minutesPlayer, secondsPlayer)));
            $('#timer-opponent').text(getTime(getSeconds(minutesOpponent, secondsOpponent)));

            return {
                player: getSeconds(minutesPlayer, secondsPlayer),
                opponent: getSeconds(minutesOpponent, secondsOpponent),
            };
        }

        function startTimer(playerTurn) {
            times = setUpTimer();

            turn = playerTurn;

            timer = setInterval(function() {
                times[turn]--;

                $('#timer-player').text(getTime(times['player']));
                $('#timer-opponent').text(getTime(times['opponent']));

                if (times[turn] == 0) {
                    navigator.vibrate(1000);
                    clearInterval(timer);
                    timer = false;

                    if ((turn === 'player' && playerColor === 'white') || (turn === 'opponent' && playerColor === 'black')) {
                        setWinner('noirs');
                    } else if ((turn === 'player' && playerColor === 'black') || (turn === 'opponent' && playerColor === 'white')) {
                        setWinner('blancs');
                    }
                }
            }, 1000);
        }

        function stopTimer() {
            clearInterval(timer);
            timer = false;
        }

        function setWinner(playerColor) {
            alert('Victoire des '+ playerColor +' !');
            stopTimer()
            $('#player-turn').text('Victoire des '+ playerColor +' !');
        }

        var turn = null;
        var times, timer;
        var playerColor = '{{ player.color }}';
        var increment = '{{ increment }}';
        placePieces('{{ fen }}');
        setUpTimer();
    </script>
{% endblock %}

{% block body %}
    <div class="row">
        <div class="col-lg-2 col-md-4 col-sm-12">
            <div class="bg-grey">
                <div>Votre temps : <span id="timer-player"></span></div>
                <div><span id="player-turn"></span></div>
                <div>Temps de l'adversaire : <span id="timer-opponent"></span></div>
            </div>
        </div>
        <div class="col-lg-7 col-md-8 col-sm-12 col-center">
            <table>
                {% if player.color == 'white' %}
                    {% for i in 8..1 %}
                        <tr>
                            <td id="a{{ i }}" class="chess-table {{ i is even ? 'case-white' : 'case-black' }}"></td>
                            <td id="b{{ i }}" class="chess-table {{ i is even ? 'case-black' : 'case-white' }}"></td>
                            <td id="c{{ i }}" class="chess-table {{ i is even ? 'case-white' : 'case-black' }}"></td>
                            <td id="d{{ i }}" class="chess-table {{ i is even ? 'case-black' : 'case-white' }}"></td>
                            <td id="e{{ i }}" class="chess-table {{ i is even ? 'case-white' : 'case-black' }}"></td>
                            <td id="f{{ i }}" class="chess-table {{ i is even ? 'case-black' : 'case-white' }}"></td>
                            <td id="g{{ i }}" class="chess-table {{ i is even ? 'case-white' : 'case-black' }}"></td>
                            <td id="h{{ i }}" class="chess-table {{ i is even ? 'case-black' : 'case-white' }}"></td>
                            <td><span style="margin-left:5px">{{ i }}</span></td>
                        </tr>
                    {% endfor %}
                    <tr>
                        <td class="text-center">a</td>
                        <td class="text-center">b</td>
                        <td class="text-center">c</td>
                        <td class="text-center">d</td>
                        <td class="text-center">e</td>
                        <td class="text-center">f</td>
                        <td class="text-center">g</td>
                        <td class="text-center">h</td>
                    </tr>
                {% else %}
                    {% for i in 1..8 %}
                        <tr>
                            <td id="h{{ i }}" class="chess-table {{ i is even ? 'case-black' : 'case-white' }}"></td>
                            <td id="g{{ i }}" class="chess-table {{ i is even ? 'case-white' : 'case-black' }}"></td>
                            <td id="f{{ i }}" class="chess-table {{ i is even ? 'case-black' : 'case-white' }}"></td>
                            <td id="e{{ i }}" class="chess-table {{ i is even ? 'case-white' : 'case-black' }}"></td>
                            <td id="d{{ i }}" class="chess-table {{ i is even ? 'case-black' : 'case-white' }}"></td>
                            <td id="c{{ i }}" class="chess-table {{ i is even ? 'case-white' : 'case-black' }}"></td>
                            <td id="b{{ i }}" class="chess-table {{ i is even ? 'case-black' : 'case-white' }}"></td>
                            <td id="a{{ i }}" class="chess-table {{ i is even ? 'case-white' : 'case-black' }}"></td>
                            <td><span style="margin-left:5px">{{ i }}</span></td>
                        </tr>
                    {% endfor %}
                    <tr>
                        <td class="text-center">h</td>
                        <td class="text-center">g</td>
                        <td class="text-center">f</td>
                        <td class="text-center">e</td>
                        <td class="text-center">d</td>
                        <td class="text-center">c</td>
                        <td class="text-center">b</td>
                        <td class="text-center">a</td>
                    </tr>
                {% endif %}
            </table>
        </div>
        <div class="col-lg-3 col-md-12 col-sm-12">
            <div class="tchat">
                <span>TODO : Tchat</span>
            </div>
        </div>
    </div>

    <div class="modal fade" id="promotion-modal" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-body">
                    <button class="button" id="q">reine</button>
                    <button class="button" id="r">tour</button>
                    <button class="button" id="b">fou</button>
                    <button class="button" id="n">cavalier</button>
                </div>
            </div>
        </div>
    </div>
{% endblock %}
