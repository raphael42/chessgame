{% extends './base.html.twig' %}

{% block title %}TODO{% endblock %}

{% block stylesheets %}
    <style>
        .case-white {
            background-color: #f7dfc5;
        }
        .case-black {
            background-color: #c67945;
        }

        .case-white.selected {
            background-color: #8baf73;
        }

        .case-black.selected {
            background-color: #646f40;
        }

        .chess-table {
            width: 64px;
            height: 64px;
            cursor: pointer;
        }

        .piece {
            width: 64px;
            height: 64px;
        }
    </style>
{% endblock %}

{% block javascripts %}
    <script src="https://code.jquery.com/jquery-1.12.4.js"></script>
    <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>

    <script src="{{ asset('assets/js/ChessScript.js') }}"></script>

    <script>
        $(document).ready(function() {
            const socket = new WebSocket('ws://localhost:3001');
            const chess = new ChessScript('{{ fen }}');

            try {
                socket.addEventListener('open', function() {
                    console.log('CONNECTED');
                    var idGame = {
                        idGame: '{{ idGame }}',
                    };
                    socket.send(JSON.stringify(idGame));
                });
            } catch (error) {
                console.log(error);
            }

            socket.addEventListener('message', function(e) {
                try {
                    var move = JSON.parse(e.data);
                    var img = $('#' + move.from).html();
                    $('#' + move.from).empty();
                    $('#' + move.to).html(img);
                    $('#' + move.to).droppable('enable');

                    if (move.flag === 'k') { // king side castelling
                        if (move.color === 'white') {
                            var img = $('#h1').html();
                            $('#h1').empty();
                            $('#h1').droppable('enable');
                            $('#f1').html(img);
                            $('#f1').droppable('disable');
                            $('#f1 img').draggable({
                                revert: true,
                            });
                        } else if (move.color === 'black') {
                            var img = $('#h8').html();
                            $('#h8').empty();
                            $('#h8').droppable('enable');
                            $('#f8').html(img);
                            $('#f8').droppable('disable');
                            $('#f8 img').draggable({
                                revert: true,
                            });
                        }
                    } else if (move.flag === 'q') { // queen side castelling
                        if (move.color === 'white') {
                            var img = $('#a1').html();
                            $('#a1').empty();
                            $('#a1').droppable('enable');
                            $('#d1').html(img);
                            $('#d1').droppable('disable');
                            $('#d1 img').draggable({
                                revert: true,
                            });
                        } else if (move.color === 'black') {
                            var img = $('#a8').html();
                            $('#a8').empty();
                            $('#a8').droppable('enable');
                            $('#d8').html(img);
                            $('#d8').droppable('disable');
                            $('#d8 img').draggable({
                                revert: true,
                            });
                        }
                    } else if (move.flag === 'e') { // en passant capture
                        if (move.color === 'white') {
                            var tmp = (move.to).split('');
                            var idPawnCatured = tmp[0] + (parseInt(tmp[1]) - 1);
                        } else if (move.color === 'black') {
                            var tmp = (move.to).split('');
                            var idPawnCatured = tmp[0] + (parseInt(tmp[1]) + 1);
                        }
                        $('#' + idPawnCatured).empty();
                    }

                    chess.move({
                        from: move.from,
                        to: move.to
                    });
                } catch(error) {
                    console.log(error);
                }
            });

            var playerColor = '{{ colorPlayer }}';
            $('.piece.'+playerColor).draggable({
                // containment: 'table',
                // revert: 'invalid',
                revert: true,
                // classes: {
                //     'ui-draggable-dragging': 'selected'
                // },
                start: function(ev, ui) {
                    var atom = $(this).parent().attr('id');
                    // $(this).parent().addClass('selected')
                },
                // drag: function(ev, ui) {
                //     $(this).parent().addClass('selected')
                //     $(this).parent().removeClass('selected')
                // },
                // stop: function(ev, ui) {
                //     $(this).parent().removeClass('selected')
                // }
            });

            $('.chess-table').droppable({
                classes: {
                    'ui-droppable-hover': 'selected'
                },
                drop: function(ev, ui) {
                    var droppedFrom = ui.draggable;
                    var droppedTo = $(this);

                    var idFrom = droppedFrom.parent().attr('id');
                    var idTo = droppedTo.attr('id');

                    var moving = chess.move({
                        from: idFrom,
                        to: idTo
                    });

                    if (moving !== null) {
                        var flag = moving.flags;
                        if (flag === 'k') { // king side castelling
                            if (playerColor === 'white') {
                                var img = $('#h1').html();
                                $('#h1').empty();
                                $('#h1').droppable('enable');
                                $('#f1').html(img);
                                $('#f1').droppable('disable');
                                $('#f1 img').draggable({
                                    revert: true,
                                });
                            } else if (playerColor === 'black') {
                                var img = $('#h8').html();
                                $('#h8').empty();
                                $('#h8').droppable('enable');
                                $('#f8').html(img);
                                $('#f8').droppable('disable');
                                $('#f8 img').draggable({
                                    revert: true,
                                });
                            }
                        } else if (flag === 'q') { // queen side castelling
                            if (playerColor === 'white') {
                                var img = $('#a1').html();
                                $('#a1').empty();
                                $('#a1').droppable('enable');
                                $('#d1').html(img);
                                $('#d1').droppable('disable');
                                $('#d1 img').draggable({
                                    revert: true,
                                });
                            } else if (playerColor === 'black') {
                                var img = $('#a8').html();
                                $('#a8').empty();
                                $('#a8').droppable('enable');
                                $('#d8').html(img);
                                $('#d8').droppable('disable');
                                $('#d8 img').draggable({
                                    revert: true,
                                });
                            }
                        } else if (flag === 'e') { // en passant capture
                            if (playerColor === 'white') {
                                var tmp = (moving.to).split('');
                                var idPawnCatured = tmp[0] + (parseInt(tmp[1]) - 1);
                            } else if (playerColor === 'black') {
                                var tmp = (moving.to).split('');
                                var idPawnCatured = tmp[0] + (parseInt(tmp[1]) + 1);
                            }
                            $('#' + idPawnCatured).empty();
                        }

                        if ($(droppedTo).html() !== '') {
                            $(this).empty();
                        }

                        $(droppedTo).droppable('disable');
                        $(droppedFrom).parent().droppable('enable');
                        $(droppedFrom).detach().css({top: 0, left: 0}).appendTo(droppedTo);

                        var movePiece = {
                            from: idFrom,
                            to: idTo,
                            color: playerColor,
                            fen: chess.fen(),
                            flag: flag
                        };
                        socket.send(JSON.stringify(movePiece));
                    }
                }
            });

            $('.chess-table img').each(function() {
                if ($(this).hasClass(playerColor)) {
                    $(this).parent().droppable('disable');
                }
            });
        });

        function placePieces(fen) {
            var tmp = fen.split(' ');
            var tmp2 = tmp[0].split('/');

            var piecesLabel = {
                'r': 'black-rook',
                'n': 'black-knight',
                'b': 'black-bishop',
                'q': 'black-queen',
                'k': 'black-king',
                'p': 'black-pawn',
                'R': 'white-rook',
                'N': 'white-knight',
                'B': 'white-bishop',
                'Q': 'white-queen',
                'K': 'white-king',
                'P': 'white-pawn',
            };

            var column = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'];
            var columnKey = 0;
            var line = 8;
            var chessboard = [];
            var atom = '';
            for (var i in tmp2) {
                atom = tmp2[i].split('');
                columnKey = 0;
                for (var j in atom) {
                    if ($.inArray(atom[j], ['r', 'n', 'b', 'q', 'k', 'p', 'R', 'N', 'B', 'Q', 'K', 'P']) !== -1) {
                        chessboard[column[columnKey] + line] = piecesLabel[atom[j]];
                        columnKey += 1;
                    } else {
                        columnKey += parseInt(atom[j]);
                    }
                }
                line--;
            }

            var src = null;
            var color = null;
            for (var k in chessboard) {
                src = "{{ asset('assets/img/pieces/chessboard.png') }}";
                src = src.replace("chessboard", chessboard[k]);

                color = 'white';
                if (chessboard[k].indexOf('white') == -1){
                    color = 'black';
                }
                $('#' + k).html('<img class="piece ' + color + '" src="' + src + '" alt>');
            }
        }

        placePieces('{{ fen }}');
    </script>
{% endblock %}

{% block body %}
    <div>
        <table>
            {% if colorPlayer == 'white' %}
                {% for i in 8..1 %}
                    <tr>
                        <td id="a{{ i }}" class="chess-table {{ i is even ? 'case-white' : 'case-black' }}"></td>
                        <td id="b{{ i }}" class="chess-table {{ i is even ? 'case-black' : 'case-white' }}"></td>
                        <td id="c{{ i }}" class="chess-table {{ i is even ? 'case-white' : 'case-black' }}"></td>
                        <td id="d{{ i }}" class="chess-table {{ i is even ? 'case-black' : 'case-white' }}"></td>
                        <td id="e{{ i }}" class="chess-table {{ i is even ? 'case-white' : 'case-black' }}"></td>
                        <td id="f{{ i }}" class="chess-table {{ i is even ? 'case-black' : 'case-white' }}"></td>
                        <td id="g{{ i }}" class="chess-table {{ i is even ? 'case-white' : 'case-black' }}"></td>
                        <td id="h{{ i }}" class="chess-table {{ i is even ? 'case-black' : 'case-white' }}"></td>
                        <td><span style="margin-left:5px">{{ i }}</span></td>
                    </tr>
                {% endfor %}
                <tr>
                    <td class="text-center">a</td>
                    <td class="text-center">b</td>
                    <td class="text-center">c</td>
                    <td class="text-center">d</td>
                    <td class="text-center">e</td>
                    <td class="text-center">f</td>
                    <td class="text-center">g</td>
                    <td class="text-center">h</td>
                </tr>
            {% else %}
                {% for i in 1..8 %}
                    <tr>
                        <td id="h{{ i }}" class="chess-table {{ i is even ? 'case-black' : 'case-white' }}"></td>
                        <td id="g{{ i }}" class="chess-table {{ i is even ? 'case-white' : 'case-black' }}"></td>
                        <td id="f{{ i }}" class="chess-table {{ i is even ? 'case-black' : 'case-white' }}"></td>
                        <td id="e{{ i }}" class="chess-table {{ i is even ? 'case-white' : 'case-black' }}"></td>
                        <td id="d{{ i }}" class="chess-table {{ i is even ? 'case-black' : 'case-white' }}"></td>
                        <td id="c{{ i }}" class="chess-table {{ i is even ? 'case-white' : 'case-black' }}"></td>
                        <td id="b{{ i }}" class="chess-table {{ i is even ? 'case-black' : 'case-white' }}"></td>
                        <td id="a{{ i }}" class="chess-table {{ i is even ? 'case-white' : 'case-black' }}"></td>
                        <td><span style="margin-left:5px">{{ i }}</span></td>
                    </tr>
                {% endfor %}
                <tr>
                    <td class="text-center">h</td>
                    <td class="text-center">g</td>
                    <td class="text-center">f</td>
                    <td class="text-center">e</td>
                    <td class="text-center">d</td>
                    <td class="text-center">c</td>
                    <td class="text-center">b</td>
                    <td class="text-center">a</td>
                </tr>
            {% endif %}
        </table>
    </div>
{% endblock %}
